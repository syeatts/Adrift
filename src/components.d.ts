/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface AppCharacters {
    }
    interface AppDungeons {
    }
    interface AppHome {
    }
    interface AppRoot {
    }
    interface AppShip {
    }
    interface SelectBox {
        "getSelection": () => Promise<string>;
        "selectId": string;
        "selectOpts": Array<string | Function>;
        "value": string;
    }
    interface StringBuilder {
        "selectOpts": Array<string>;
        "stringSets": Object;
    }
}
declare global {
    interface HTMLAppCharactersElement extends Components.AppCharacters, HTMLStencilElement {
    }
    var HTMLAppCharactersElement: {
        prototype: HTMLAppCharactersElement;
        new (): HTMLAppCharactersElement;
    };
    interface HTMLAppDungeonsElement extends Components.AppDungeons, HTMLStencilElement {
    }
    var HTMLAppDungeonsElement: {
        prototype: HTMLAppDungeonsElement;
        new (): HTMLAppDungeonsElement;
    };
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppShipElement extends Components.AppShip, HTMLStencilElement {
    }
    var HTMLAppShipElement: {
        prototype: HTMLAppShipElement;
        new (): HTMLAppShipElement;
    };
    interface HTMLSelectBoxElement extends Components.SelectBox, HTMLStencilElement {
    }
    var HTMLSelectBoxElement: {
        prototype: HTMLSelectBoxElement;
        new (): HTMLSelectBoxElement;
    };
    interface HTMLStringBuilderElement extends Components.StringBuilder, HTMLStencilElement {
    }
    var HTMLStringBuilderElement: {
        prototype: HTMLStringBuilderElement;
        new (): HTMLStringBuilderElement;
    };
    interface HTMLElementTagNameMap {
        "app-characters": HTMLAppCharactersElement;
        "app-dungeons": HTMLAppDungeonsElement;
        "app-home": HTMLAppHomeElement;
        "app-root": HTMLAppRootElement;
        "app-ship": HTMLAppShipElement;
        "select-box": HTMLSelectBoxElement;
        "string-builder": HTMLStringBuilderElement;
    }
}
declare namespace LocalJSX {
    interface AppCharacters {
    }
    interface AppDungeons {
    }
    interface AppHome {
    }
    interface AppRoot {
    }
    interface AppShip {
    }
    interface SelectBox {
        "selectId"?: string;
        "selectOpts"?: Array<string | Function>;
        "value"?: string;
    }
    interface StringBuilder {
        "selectOpts"?: Array<string>;
        "stringSets"?: Object;
    }
    interface IntrinsicElements {
        "app-characters": AppCharacters;
        "app-dungeons": AppDungeons;
        "app-home": AppHome;
        "app-root": AppRoot;
        "app-ship": AppShip;
        "select-box": SelectBox;
        "string-builder": StringBuilder;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-characters": LocalJSX.AppCharacters & JSXBase.HTMLAttributes<HTMLAppCharactersElement>;
            "app-dungeons": LocalJSX.AppDungeons & JSXBase.HTMLAttributes<HTMLAppDungeonsElement>;
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-ship": LocalJSX.AppShip & JSXBase.HTMLAttributes<HTMLAppShipElement>;
            "select-box": LocalJSX.SelectBox & JSXBase.HTMLAttributes<HTMLSelectBoxElement>;
            "string-builder": LocalJSX.StringBuilder & JSXBase.HTMLAttributes<HTMLStringBuilderElement>;
        }
    }
}
